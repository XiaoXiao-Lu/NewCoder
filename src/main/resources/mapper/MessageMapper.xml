<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kinnon.mapper.MessageMapper">

    <resultMap id="BaseResultMap" type="com.kinnon.domain.Message">
        <id property="id" column="id" jdbcType="INTEGER"/>
        <result property="fromId" column="from_id" jdbcType="INTEGER"/>
        <result property="toId" column="to_id" jdbcType="INTEGER"/>
        <result property="conversationId" column="conversation_id" jdbcType="VARCHAR"/>
        <result property="content" column="content" jdbcType="VARCHAR"/>
        <result property="status" column="status" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <sql id="Base_Column_List">
        id
        ,from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>

    <sql id="Base_Column_List2">
        from_id,to_id,
        conversation_id,content,status,
        create_time
    </sql>

    <insert id="insertMessage" keyProperty="id" parameterType="Message">
        insert  into message (<include refid="Base_Column_List2"></include>)
        values(#{fromId},#{toId},#{conversationId},#{content},#{status},#{createTime})
    </insert>

    <update id="updateMessageStatus">
        update message set status = #{status}
        where id in
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="selectConversations" resultType="com.kinnon.domain.Message">
        select
        <include refid="Base_Column_List"/>
        from message where id in
        (
            select max(id) from message
            where from_id != 1
            and status != 2
            and  (from_id=#{userId} or to_id=#{userId})
            group by conversation_id

        )
        order by create_time desc
        limit #{offset},#{limit}
    </select>

    <select id="selectConversationCount" resultType="java.lang.Integer">
        select count(m.maxId)
        from (
                 select max(id) as maxId
                 from message
                 where (from_id = #{userId} or to_id = #{userId})
                   and from_id != 1
                and status != 2
                 group by conversation_id
                 order by create_time desc
             ) as m


    </select>

    <select id="selectLetters" resultType="com.kinnon.domain.Message">
        select
        <include refid="Base_Column_List"/>
        from message
        where conversation_id=#{conversationId}
        and from_id != 1
        and status != 2
        order by create_time desc
        limit #{offset},#{limit}
    </select>

    <select id="selectLetterCount" resultType="java.lang.Integer">
        select count(id)
        from message
        where from_id != 1
            and status != 2
            and conversation_id=#{conversationId}

    </select>

    <select id="selectLetterUnreadCount" resultType="java.lang.Integer">
        select count(id) from message
        where from_id != 1
        and status != 2
        and status = 0
        and to_id = #{userId}
        <if test="conversationId !=null">
            and conversation_id=#{conversationId}
        </if>

    </select>

</mapper>
